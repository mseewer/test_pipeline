on:
  workflow_dispatch:
  # schedule:
  # - cron: "0 2 * * *"
jobs:
  my_job:
    name: test job
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install Java
        run: sudo apt-get install openjdk-11-jre 
      - name: Fetch ReVanced CLI
        uses: dsaltares/fetch-gh-release-asset@1.1.1
        with:
          # The `org/repo` containing the release.
          repo: 'ReVanced/revanced-cli'
          # The release version to fetch from in the form `tags/<tag_name>` or `<release_id>`.
          # version: # optional, default is latest
          # The name of the file to be downloaded.
          file: "revanced-cli-.*\\.jar$"
          # Use regex for file input
          regex: true
      - run: mv revanced-cli-*.jar revanced-cli.jar
      - name: Fetch ReVanced patches
        uses: dsaltares/fetch-gh-release-asset@1.1.1
        with:
          # The `org/repo` containing the release.
          repo: 'ReVanced/revanced-patches'
          # The release version to fetch from in the form `tags/<tag_name>` or `<release_id>`.
          # version: # optional, default is latest
          # The name of the file to be downloaded.
          file: "revanced-patches-.*\\.jar$"
          # Use regex for file input
          regex: true
      - run: ls -l
      - run: mv revanced-patches-*.jar revanced-patches.jar
      - name: fetch revanced integrations
        uses: dsaltares/fetch-gh-release-asset@1.1.1
        with:
          # The `org/repo` containing the release.
          repo: 'ReVanced/revanced-integrations'
          # The release version to fetch from in the form `tags/<tag_name>` or `<release_id>`.
          # version: # optional, default is latest
          # The name of the file to be downloaded.
          file: "revanced-integrations-.*\\.apk$"
          # Use regex for file input
          regex: true
      - run: mv revanced-integrations-*.apk revanced-integrations.apk
      - name: create JSON file
        #       {
        #   "options": {
        #     "arch": "arm64-v8a"
        #   },
        #   "apps": [
        #     {
        #       "name": "yt",
        #       "org": "google-inc",
        #       "repo": "youtube",
        #       "version": "$latest_YT_version"
        #     },
        #   ]
        # }
        run: |
          latest_YT_version=$(java -jar revanced-cli.jar list-versions -f com.google.android.youtube revanced-patches.jar | awk '$1 ~ /^[0-9]/{print $1}' | sort -V | tail -n 1)
          echo "Latest YouTube version = $latest_YT_version"
          echo "latest_YT_version=$latest_YT_version" >> $GITHUB_ENV
          echo "{\"options\":{\"arch\":\"arm64-v8a\"},\"apps\":[{\"name\":\"original_youtube\",\"org\":\"google-inc\",\"repo\":\"youtube\",\"version\":\"$latest_YT_version\"}]}" > apkmirror_apps.json
      - run: cat apkmirror_apps.json
      - name: Fetch APKs
        uses: dsaltares/fetch-gh-release-asset@1.1.1
        with:
          # The `org/repo` containing the release.
          repo: 'tanishqmanuja/apkmirror-downloader'
          # The release version to fetch from in the form `tags/<tag_name>` or `<release_id>`.
          # version: # optional, default is latest
          # The name of the file to be downloaded.
          file: "^apkmd$"
          # Use regex for file input
          regex: true
      - run: mv *apkmd* apkmd
      - run: ls -l
      - run: chmod +x apkmd
      - run: ./apkmd apkmirror_apps.json
      - run: ls -l
      - run: ls -l downloads
      - name: Patch APK
        run: java -jar revanced-cli.jar patch --patch-bundle revanced-patches.jar -m revanced-integrations.apk -o downloads/patched_youtube.apk downloads/original_youtube.apk
      - name: Patch APK for root
        run: java -jar revanced-cli.jar patch --patch-bundle revanced-patches.jar -m revanced-integrations.apk -o downloads/root_patched_youtube.apk --exclude "GmsCore support" downloads/original_youtube.apk
      - run: ls -l
      - name: fetch revanced gmscore
        uses: dsaltares/fetch-gh-release-asset@1.1.1
        with:
          # The `org/repo` containing the release.
          repo: 'ReVanced/GmsCore'
          # The release version to fetch from in the form `tags/<tag_name>` or `<release_id>`.
          # version: # optional, default is latest
          # The name of the file to be downloaded.
          file: "^app.revanced.android.gms-\\d+-signed.apk$" # app.revanced.android.gms-1-signed.apk or any number
          # Use regex for file input
          regex: true
      - run: ls -l
      - run: mv app.revanced.android.gms-.*-signed.apk downloads/GmsCore.apk
      - run: ls -l downloads/
      - name: Release
        uses: softprops/action-gh-release@v2
        # if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: "Youtube APKs"
          tag_name: "${{ env.latest_YT_version }}"
          body: "Viel Spass"
          files: |
            downloads/patched_youtube.apk
            downloads/GmsCore.apk
            downloads/root_patched_youtube.apk
            downloads/original_youtube.apk
          
    
